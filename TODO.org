* DONE Dokreslit v MD mapu přechodů.
* DONE Předělat trvání stavu na trvání "nonIdleTime"
* DONE vytáhnout konstaty času jízdy nahoru (ideálně úplně)
* DONE Přidat stav PULL_DOWN_NEXT_ROT + NEXT_ROT_UP.
* DONE odladit správné časy
* DONE Úklidový refaktoring před vydáním
** DONE update README.md
** DONE přidat CHANGELOG.md
* TODO nasazení
** TODO odladění správného zapojení (UP/DOWN)
** DONE Uvolnění digitálních vstupů 0/1 (trvalé zapnutí ladícího výstupu na sériovku)
** Pracovna - nahoru (zelená), arduino také (zdá se vpořádku)
* TAG
* refaktoring před dalším krokem
** zrušit `global.h` ... dát přímo include toho co potřeba (většinou to není potřeba)
** přepracovat `platform_if`
 >>> celkově se v `platform_if.h` míchají:
 1) odstínění se od platformy 
    - čtení tlačítek, zápis výstupu, čtení času, logování
    - abych se vyhnul #ifdef ARDUINO v kódu
    ... přitom ale logování je ještě bokem řešeno přes #ifdef Arduino kde potřeba
 2) "ShutterIO" - převod dvojice tlačítek a výstupů na IO_STATE vstupní a IO_STATE výstupní
 3) "ShutterIO" - simulace lidské obsluhy
 >>> potřeba je aby byly vrstvy implementovány správně odděleně nebo vůbec... 
 >>> vrstvu 3 nechci - nahradím možností pouštět na PC tentýž kód co na Arduino
 >>> postup úprav:
  - vznikne Platform (umí běžet na PC i Arduino ... jen ta používá #ifdef ARDUINO)
      class Platform:
         static: SetupPin, WritePin, ReadPin, GetTimeMs, Log(int/str)
  - logování všude (hlavně ve state machine) vyřeším přes Platform
  - vznikne UnitIO
      UnitIO(pinout), ReadSwitch, WritePover
      ... může vzniknout i jako UnitIOIf a z něj UnitIOReal, UnitIOSim 
* refaktoring před dalším krokem
** state_machine - do jednoho adresáře s tím co potřebuje - stavy
** plnění mapy přechodů - blíže uživateli
** výstupní funkce (na co má dopad který stav) blíže k uživateli
* rozběhnutí a překlad PC
* funkce spřažení žaluzíí dohromady