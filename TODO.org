* DONE Dokreslit v MD mapu přechodů.
* DONE Předělat trvání stavu na trvání "nonIdleTime"
* DONE vytáhnout konstaty času jízdy nahoru (ideálně úplně)
* DONE Přidat stav PULL_DOWN_NEXT_ROT + NEXT_ROT_UP.
* DONE odladit správné časy
* TODO Úklidový refaktoring před vydáním
** DONE update README.md
** DONE přidat CHANGELOG.md
** TODO nasazení + TAG
** TODO platform_if - možná nanic a řešitelné pouze přes #define ARDUINO - prověřit
 >>> celkově se v `platform_if.h` míchají:
 1) odstínění se od platformy 
    - čtení tlačítek, zápis výstupu, čtení času, logování
    - abych se vyhnul #ifdef ARDUINO v kódu
    ... přitom ale logování je ještě bokem řešeno přes #ifdef Arduino kde potřeba
 2) "ShutterIO" - převod dvojice tlačítek a výstupů na IO_STATE vstupní a IO_STATE výstupní
 3) "ShutterIO" - simulace lidské obsluhy
 >>> potřeba je aby byly vrstvy implementovány správně odděleně nebo vůbec... 
 >>> vrstvu 3 nechci - nahradím možností pouštět na PC tentýž kód co na Arduino
 >>> postup úprav:
  - překlad PC zajistit
  - funkcionalitu 3) zahodím -> PlatformIf se stane Platform (bez dědění)
  - vytvořím vrstvu pro odstínění platformy class Platform, statické metody
     - SetupPin, WritePin, ReadPin, Log(int/char *)
     - v CPP má #ifdef ARNUINO (to se pak už nikde neobjeví)
     - navěsím na ni vešteré logování
  - vytvořím vrstvu UnitIO - vstup a výstup jedné unity stojící nad Platform
** zrušit `global.h` ... vyplyne z bodu výše
* refaktoring před dalším krokem
** state_machine - do jednoho adresáře s tím co potřebuje - stavy
** plnění mapy přechodů - blíže uživateli
** výstupní funkce (na co má dopad který stav) blíže k uživateli
* rozběhnutí a překlad PC
* funkce spřažení žaluzíí dohromady